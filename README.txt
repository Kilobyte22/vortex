Buttscript
==========

Buttscript is a high level scripting language that compiles to Lua. Its
current compiler is being written in Lua as well, however next implementation
will be self-hosted, written in Buttscript itself (this implementation is
merely a subset meant for bootstrapping purposes).

Features
--------

Buttscript is a dynamically strongly typed multi-paradigm language with
emphasis on procedural and functional programming paradigms. Object oriented
programming is supported via extensible syntax and semantics. Buttscript draws
inspiration from Lua itself, Python, C, Scheme and Caml. Rust was also an
inspiring for me to some degree.

Thanks to the fact it compiles to Lua it can be easily integrated into any
Lua project. Buttscript provides its own standard library and scripts run
in their own environments, but it's possible to access Lua from Buttscript
via a special table and the same from the other side.

Buttscript uses a curly braced, free form syntax (with optional semicolons).
The source can be treated as a stream of tokens without any emphasis on
newlines or whitespace (same as Lua). Most of constructs in the language
are expressions (including blocks). There are some statements left for
convenience purposes.

Some of the supported/planned features are:

* Pretty much all of Lua's features, including tables and metatables
* Lua-like semantics
* Convenient and simple syntax for functions
* Blocks are expressions, most of operators form expressions, control
  structures are in fact expressions, returns are implicit (last
  statement in a block plus explicit ret keyword if required)
* Generators and coroutines
* Lightweight object system (implemented in the standard library)
* Functions are first class objects and can be returned
* AST macros
* Lexer access from the language
* Quotes (Lisp-like)
* Static metaprogramming
* Higher order modules
* Pattern matching
* List/tuple comprehensions
* Tail recursion
* Correct debug info generation (assumes patched Lua or LuaJIT, otherwise
  ignored)
* Complete, useful and concise standard library
* and much more.

Code generated by Buttscript is equally fast compared to handwritten Lua.

Status
------

Buttscript 0.1 is on the way. There is a working lexer and a work in progress
parser. Code generator is not yet started.

Formal grammar of version 0.1 of the language is written down (see SYNTAX.txt)
in extended BNF. Language reference is a work in progress.

Note that the language features and syntax are not yet finalized and are
undergoing changes. I don't want to get caught in the backwards compatibility
hell before it's truly ready.

Example code
------------

Just to give you an idea how the language looks.

    // this is a comment!
    print "hello world!"
    
    /* this is also a comment
     * /* and can be nested */
     */
    
    let i = 5 /* local variables */
    
    /* functions */
    let fun = fn a, b -> a + b
    
    /* recursive functions */
    let rec foldr = fn f, z, t ->
        if not t -> z else -> f(first(t), foldr(f, z, rest(t)))
    
    /* blocks are expressions and have implicit return values */
    let n = {
        print "hi!"
        150 * 3
    }
    
    /* explicit return values used with control expressions */
    if foo -> {
        print "foo!"
        ret 5
    } else -> {
        ret 10
    }
    
    /* when used with blocks, -> can be omitted */
    let rec fact = fn n {
        if n == 0 {
            1
        } else {
            n * fact(n - 1)
        }
    }
    
    /* tuple comprehensions */
    let a, b, c = for i in range(1, 3) -> yield i
    
    /* used with tables */
    let tbl = { for i in range(1, 20) -> if i % 2 == 0 -> yield i }
    
    /* variables are automatically resolved in strings */
    for i in range(1, 20) ->
        print "$i"
    
    /* so are expressions */
    print "$(5 * 10 / 2)"
