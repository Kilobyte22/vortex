/* regular factorial */
let rec fact = fn n ->
    if n == 0 ->
        1
    else {
        /* a test for statement block codegen */
        print("hai from fact")
        n * fact(n - 1)
    }

/* tail recursive factorial */
let rec fact_tail = fn n, acc = 1 {
    if n == 0 ->
        acc
    else ->
        fact_tail(n - 1, n * acc)
}

let fun = fn a, b, c -> a + b * c

let rec tail = fn a, b ->
    tail(tail(tail(a + 1), tail(b + 1)), tail(a + b))

print("hello world!")
print(fact(6))
print(fact_tail(6))
print(fun(5, 10, 15))

let defargs = fn a, b, c = 5, d = "hello", e = c * c ->
    print(a, b, c, d, e)

defargs(66)
defargs(66, 67)
defargs(66, 67, 169)
defargs(66, 67, 170, "world")
defargs(66, 67, 171, "world", 81)
defargs(66, 67, nil, "hai", nil)

let block1 = fn a -> {
    print("foo")
    let x = a * a
    x
}

// fn a, b -> { ... } is a valid form as well
let block2 = fn a, b {
    print("hello")
    print("world")
    return (a + b, a - b, a * b, a / b)
}

/* again, fn -> { ... } is a valid form
 * let's test long comments here when at it
 */
let rec block_tail = fn {
    block_tail()
}

print(block1(5))
print(block2(6, 7))

let blk = {
    print("hi from a block")
    5
}
print("block ret", blk)

let i = 0
while i < 5 -> print("hello from the loop", i += 1)
while i > 150 {
    print("more hellos")
    let a = 150
}
i += i * 2
print(i)
